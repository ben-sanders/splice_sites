BED files of all human splice sites.
Extracted from UCSC table browser (
 table ‘refGene’ from the track ‘RefSeq Genes’, and the group ‘Gen

02_make_exon_list.sh generates a fasta file of sequences 100bp sequences around refseq splice sites, this format is not compatible with 
alamut batch.

NOTE: To save space, after database update, the files generated by the script 02_make_exon_list.sh (based on the process below) are deleted. They can be recreated by running the script.
Run the script from within the file you want the files to be created in.

-----------------------------------
Preparing refseq sites for database
-----------------------------------

sorted.allexons.bed - all intron-exon boundaries, sorted by chromosome + position
CHROM	START	END	ID	DON/ACC	STRAND

The positions in sorted.allexons.bed are the index point BETWEEN the +-1 base and the first exonic base. This range needs to be extended by 1 to cover the single +-1 position base for extraction.
The awk script adjusts the positions accounting for splice-site type and strand orientation, so they are all immediated following the target. The following has been run and checked:

	$ cat sorted.allexons.bed | awk 'BEGIN{FS="\\t"}{if ($5 == 0 && $6 == "+" ) print $1 "\t" $2+1 "\t" $3+1 "\t" $4 "\t" $5 "\t" $6;
							 else if ($5 == 1 && $6 == "-") print $1 "\t" $2+1 "\t" $3+1 "\t" $4 "\t" $5 "\t" $6; else print}' > plusminus1.bed

The +-1 target base is then covered by removing 1 from the start index. This could have been included above, but 

	$ cat <bedfile> | awk 'BEGIN{FS="\\t"}{print $1 "\t" $2-1 "\t" $3 "\t" $4 "\t" $5 "\t" $6;}' > <output bedfile>

	$ bedtools getfasta -fi /home/genetics/Documents/ReferenceGenome/hg19.fa -name -bed <bedfile> -fo <output fasta>
		* -name adds the ID from the bed file as the fasta ID.	
		* check the ordering is the same by comparing with id column from bed file.

NOTE: the minus50 bed file, when converted to FASTA, misses the base between the end of the range and the splice-site base. The end position of the minus50 needs 1 adding

	$ bedtools flank -i plusminus1.allexons.bed -g /home/genetics/Documents/ReferenceGenome/hg19.fa.fai -l 50 -r 0 > minus50.allexons.bed
	$ bedtools flank -i plusminus1.allexons.bed -g /home/genetics/Documents/ReferenceGenome/hg19.fa.fai -l 0 -r 49 | awk 'BEGIN{FS="\\t"}{print $1 "\t" $2-1 "\t" $3 "\t" $4 "\t" $5 "\t" $6}'> plus50.allexons.bed

	$ bedtools getfasta -fi /home/genetics/Documents/ReferenceGenome/hg19.fa -name -bed <bedfile> -fo <output fasta>

remove the id lines from fasta outputs with
	
	$ grep -v "^>" <fasta> > <output>

NOTE: All fasta output is from the +ve strand. Sequences may need to be reversed to get the true sequence for the gene.
NOTE: Because of the way the reference genome is formatted, some bases are lowercase (? in repeated regions?). Convert to uppercase with:
	$ tr '[:lower:]' '[:upper:]' < wt.allexons > upper.wt.allexons	# do wt, minus50, and plus50

------------------------------------
Generating ALT alleles and combining
------------------------------------

Alamut batch requires a variant allele to function, even though we are only interested in the wild-type.
The +-1 sites are almost exclusively G, although the file contains some C as there are sites on the -ve strand with sequence from the +ve.

The exact makeup is:
	C: 200092
	G: 203139
	A: 372
	T: 373
	N: 2
There are a total of 403978 sites, of which:
	+ve: 203494
	-ve: 200484

Create an alternative allele for use in alamut. Since A or T should abolish splicing in the majority of cases, use them. If alread A or T, swap for the other.

	$ cat upper.wt.allexons | awk '{if ($1 == "C" || $1 == "T") print A; else print "T"}'

Combine into one output:
	$ paste plusminus1.allexons.bed upper.minus50.allexons upper.wt.allexons alt.allexons upper.plus50.allexons > combined.allexons

final structure:
CHROM	START	END	ID	DON/ACC	STRAND	TRANSCRIPT  GENE    MINUS50	REF	ALT	PLUS50
