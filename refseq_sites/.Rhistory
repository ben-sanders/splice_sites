random <- merge(random_called, random_uncalled, all=TRUE)
# merge everything for histogram
# use cleaned data, as only want the called sites
merged_GS_data <- merge(refseq_cleaned_GS_data, random_cleaned_GS_data, all=TRUE)
# remove uncleaned data
rm(refseq_GS_data)
rm(random_GS_data)
rm(refseq_cleaned_GS_data)
rm(random_cleaned_GS_data)
GS_ROC_results = matrix(ncol=7, nrow=length(seq(floor(min(merged_GS_data$SCORE)), ceiling(max(merged_GS_data$SCORE)))))
# i is for indexing into results
i = 1
for(cutoff in seq(floor(min(merged_GS_data$SCORE)), ceiling(max(merged_GS_data$SCORE))))
{
# called sites above the cutoff
tp = (length(refseq_called$SCORE[refseq_called$SCORE > cutoff])) / 1000
# any uncalled in RefSeq data are false negatives, as well as any below the cutoff
fn = (length(refseq_called$SCORE[refseq_called$SCORE < cutoff])) / 1000 # (length(refseq_uncalled$SCORE) + length(refseq_called$SCORE[refseq_called$SCORE < cutoff])) / 1000
# true negatives are the random sites scored below cutoff + random sites not called
tn = (length(random_called$SCORE[random_called$SCORE < cutoff])) / 1000 # (length(random_uncalled$SCORE) + length(random_called$SCORE[random_called$SCORE < cutoff])) / 1000
# false positives are any called in random sites
fp = (length(random_called$SCORE[random_called$SCORE > cutoff])) /1000
tpr = tp / (tp + fn) # sensitivity
tnr = tn / (tn + fp) # specificity
fpr = fp / (fp + tn) # 1 - specificity
ppv = tp / (tp + fp)
npv = tn / (tn + fn)
accuracy = (tp + tn) / (tp + tn + fp + fn)
mcc = ((tp * tn) - (fp * fn)) / sqrt((tp + fp) * (tp + fn) * (tn + fp) * (tn + fn))
GS_ROC_results[i,1] <- fpr
GS_ROC_results[i,2] <- tpr
GS_ROC_results[i,3] <- cutoff
GS_ROC_results[i,4] <- accuracy
GS_ROC_results[i,5] <- mcc
GS_ROC_results[i,6] <- ppv
GS_ROC_results[i,7] <- npv
i <- i +1
}
GS_ROC_results <- data.frame(GS_ROC_results)
ggplot(GS_ROC_results) + geom_line(aes(x=X1, y=X2), size=1) + xlab("False positive rate") + xlim(0,1) + ylab("True positive rate") + ylim(0,1) + ggtitle("MaxEntScan reciever operating characterstic curve")
ggplot(GS_ROC_results, aes(x=X3)) + geom_line(aes(y=X2, colour="TPR"), size=1) + geom_line(aes(y=X1, colour = "FPR"), size=1) + geom_line(aes(y=X4, colour="Accuracy"), size=1) + scale_colour_manual("", breaks=c("TPR", "FPR", "Accuracy"), values=c("TPR"="blue", "FPR"="green", "Accuracy"="red")) + xlab("cutoff") +ylab("") + ggtitle("Accuracy of GeneSplicer")
head(merged_GS_data)
length(merged_GS_data$ID)
head(merged_GS_data$ID)
head(grep(pattern="acc", x=merged_GS_data$ID))
head(grepl(pattern="acc", x=merged_GS_data$ID))
head(merged_GS_data[grepl(pattern="acc", x=merged_GS_data$ID)])
head(merged_GS_data[grepl(pattern="acc", x=merged_GS_data$ID),])
summary(merged_GS_data[grepl(pattern="acc", x=merged_GS_data$ID),])
summary(merged_GS_data[grepl(pattern="don", x=merged_GS_data$ID),])
GS_ROC_results = matrix(ncol=7, nrow=length(seq(from = floor(min(merged_GS_data$SCORE)), to = ceiling(max(merged_GS_data$SCORE)), by = 0.1)))
# i is for indexing into results
i = 1
for(cutoff in seq(from = floor(min(merged_GS_data$SCORE)), to = ceiling(max(merged_GS_data$SCORE)), by = 0.1))
{
# called sites above the cutoff
tp = (length(refseq_called$SCORE[refseq_called$SCORE > cutoff])) / 1000
# any uncalled in RefSeq data are false negatives, as well as any below the cutoff
fn = (length(refseq_called$SCORE[refseq_called$SCORE < cutoff])) / 1000 # (length(refseq_uncalled$SCORE) + length(refseq_called$SCORE[refseq_called$SCORE < cutoff])) / 1000
# true negatives are the random sites scored below cutoff + random sites not called
tn = (length(random_called$SCORE[random_called$SCORE < cutoff])) / 1000 # (length(random_uncalled$SCORE) + length(random_called$SCORE[random_called$SCORE < cutoff])) / 1000
# false positives are any called in random sites
fp = (length(random_called$SCORE[random_called$SCORE > cutoff])) /1000
tpr = tp / (tp + fn) # sensitivity
tnr = tn / (tn + fp) # specificity
fpr = fp / (fp + tn) # 1 - specificity
ppv = tp / (tp + fp)
npv = tn / (tn + fn)
accuracy = (tp + tn) / (tp + tn + fp + fn)
mcc = ((tp * tn) - (fp * fn)) / sqrt((tp + fp) * (tp + fn) * (tn + fp) * (tn + fn))
GS_ROC_results[i,1] <- fpr
GS_ROC_results[i,2] <- tpr
GS_ROC_results[i,3] <- cutoff
GS_ROC_results[i,4] <- accuracy
GS_ROC_results[i,5] <- mcc
GS_ROC_results[i,6] <- ppv
GS_ROC_results[i,7] <- npv
i <- i +1
}
GS_ROC_results <- data.frame(GS_ROC_results)
ggplot(GS_ROC_results) + geom_line(aes(x=X1, y=X2), size=1) + xlab("False positive rate") + xlim(0,1) + ylab("True positive rate") + ylim(0,1) + ggtitle("MaxEntScan reciever operating characterstic curve")
ggplot(GS_ROC_results, aes(x=X3)) + geom_line(aes(y=X2, colour="TPR"), size=1) + geom_line(aes(y=X1, colour = "FPR"), size=1) + geom_line(aes(y=X4, colour="Accuracy"), size=1) + scale_colour_manual("", breaks=c("TPR", "FPR", "Accuracy"), values=c("TPR"="blue", "FPR"="green", "Accuracy"="red")) + xlab("cutoff") +ylab("") + ggtitle("Accuracy of GeneSplicer")
GS_ROC_results = matrix(ncol=7, nrow=length(seq(from = floor(min(merged_GS_data$SCORE)), to = ceiling(max(merged_GS_data$SCORE)), by = 0.001)))
# i is for indexing into results
i = 1
for(cutoff in seq(from = floor(min(merged_GS_data$SCORE)), to = ceiling(max(merged_GS_data$SCORE)), by = 0.001))
{
# called sites above the cutoff
tp = (length(refseq_called$SCORE[refseq_called$SCORE > cutoff])) / 1000
# any uncalled in RefSeq data are false negatives, as well as any below the cutoff
fn = (length(refseq_called$SCORE[refseq_called$SCORE < cutoff])) / 1000 # (length(refseq_uncalled$SCORE) + length(refseq_called$SCORE[refseq_called$SCORE < cutoff])) / 1000
# true negatives are the random sites scored below cutoff + random sites not called
tn = (length(random_called$SCORE[random_called$SCORE < cutoff])) / 1000 # (length(random_uncalled$SCORE) + length(random_called$SCORE[random_called$SCORE < cutoff])) / 1000
# false positives are any called in random sites
fp = (length(random_called$SCORE[random_called$SCORE > cutoff])) /1000
tpr = tp / (tp + fn) # sensitivity
tnr = tn / (tn + fp) # specificity
fpr = fp / (fp + tn) # 1 - specificity
ppv = tp / (tp + fp)
npv = tn / (tn + fn)
accuracy = (tp + tn) / (tp + tn + fp + fn)
mcc = ((tp * tn) - (fp * fn)) / sqrt((tp + fp) * (tp + fn) * (tn + fp) * (tn + fn))
GS_ROC_results[i,1] <- fpr
GS_ROC_results[i,2] <- tpr
GS_ROC_results[i,3] <- cutoff
GS_ROC_results[i,4] <- accuracy
GS_ROC_results[i,5] <- mcc
GS_ROC_results[i,6] <- ppv
GS_ROC_results[i,7] <- npv
i <- i +1
}
merged_GS_data$normSCORE <- (merged_GS_data$SCORE - min(merged_GS_data$SCORE)) / (max(merged_GS_data$WT) - min(merged_GS_data$WT))
merged_GS_data$normSCORE <- (merged_GS_data$SCORE - min(merged_GS_data$SCORE)) / (max(merged_GS_data$SCORE) - min(merged_GS_data$SCORE))
View(merged_PWM_data)
GS_ROC_results = matrix(ncol=7, nrow=length(seq(from = floor(min(merged_GS_data$normSCORE)), to = ceiling(max(merged_GS_data$normSCORE)), by = 0.01)))
# i is for indexing into results
i = 1
for(cutoff in seq(from = floor(min(merged_GS_data$normSCORE)), to = ceiling(max(merged_GS_data$normSCORE)), by = 0.01))
{
# called sites above the cutoff
tp = (length(refseq_called$normSCORE[refseq_called$normSCORE > cutoff])) / 1000
# any uncalled in RefSeq data are false negatives, as well as any below the cutoff
fn = (length(refseq_called$normSCORE[refseq_called$normSCORE < cutoff])) / 1000 # (length(refseq_uncalled$SCORE) + length(refseq_called$SCORE[refseq_called$SCORE < cutoff])) / 1000
# true negatives are the random sites scored below cutoff + random sites not called
tn = (length(random_called$normSCORE[random_called$normSCORE < cutoff])) / 1000 # (length(random_uncalled$SCORE) + length(random_called$SCORE[random_called$SCORE < cutoff])) / 1000
# false positives are any called in random sites
fp = (length(random_called$normSCORE[random_called$normSCORE > cutoff])) /1000
tpr = tp / (tp + fn) # sensitivity
tnr = tn / (tn + fp) # specificity
fpr = fp / (fp + tn) # 1 - specificity
ppv = tp / (tp + fp)
npv = tn / (tn + fn)
accuracy = (tp + tn) / (tp + tn + fp + fn)
mcc = ((tp * tn) - (fp * fn)) / sqrt((tp + fp) * (tp + fn) * (tn + fp) * (tn + fn))
GS_ROC_results[i,1] <- fpr
GS_ROC_results[i,2] <- tpr
GS_ROC_results[i,3] <- cutoff
GS_ROC_results[i,4] <- accuracy
GS_ROC_results[i,5] <- mcc
GS_ROC_results[i,6] <- ppv
GS_ROC_results[i,7] <- npv
i <- i +1
}
GS_ROC_results <- data.frame(GS_ROC_results)
ggplot(GS_ROC_results) + geom_line(aes(x=X1, y=X2), size=1) + xlab("False positive rate") + xlim(0,1) + ylab("True positive rate") + ylim(0,1) + ggtitle("MaxEntScan reciever operating characterstic curve")
# percentages
# is ROC possible when so many aren't even called?
GS_ROC_results = matrix(ncol=7, nrow=length(seq(from = floor(min(merged_GS_data$normSCORE)), to = ceiling(max(merged_GS_data$normSCORE)), by = 0.01)))
# i is for indexing into results
i = 1
for(cutoff in seq(from = floor(min(merged_GS_data$normSCORE)), to = ceiling(max(merged_GS_data$normSCORE)), by = 0.01))
{
# called sites above the cutoff
tp = (length(refseq_called$normSCORE[refseq_called$normSCORE > cutoff])) / 1000
# any uncalled in RefSeq data are false negatives, as well as any below the cutoff
fn = (length(refseq_called$normSCORE[refseq_called$normSCORE < cutoff])) / 1000 # (length(refseq_uncalled$SCORE) + length(refseq_called$SCORE[refseq_called$SCORE < cutoff])) / 1000
# true negatives are the random sites scored below cutoff + random sites not called
tn = (length(random_called$normSCORE[random_called$normSCORE < cutoff])) / 1000 # (length(random_uncalled$SCORE) + length(random_called$SCORE[random_called$SCORE < cutoff])) / 1000
# false positives are any called in random sites
fp = (length(random_called$normSCORE[random_called$normSCORE > cutoff])) /1000
tpr = tp / (tp + fn) # sensitivity
tnr = tn / (tn + fp) # specificity
fpr = fp / (fp + tn) # 1 - specificity
ppv = tp / (tp + fp)
npv = tn / (tn + fn)
accuracy = (tp + tn) / (tp + tn + fp + fn)
mcc = ((tp * tn) - (fp * fn)) / sqrt((tp + fp) * (tp + fn) * (tn + fp) * (tn + fn))
GS_ROC_results[i,1] <- fpr
GS_ROC_results[i,2] <- tpr
GS_ROC_results[i,3] <- cutoff
GS_ROC_results[i,4] <- accuracy
GS_ROC_results[i,5] <- mcc
GS_ROC_results[i,6] <- ppv
GS_ROC_results[i,7] <- npv
i <- i +1
}
GS_ROC_results <- data.frame(GS_ROC_results)
ggplot(GS_ROC_results) + geom_line(aes(x=X1, y=X2), size=1) + xlab("False positive rate") + xlim(0,1) + ylab("True positive rate") + ylim(0,1) + ggtitle("MaxEntScan reciever operating characterstic curve")
GS_ROC_results = matrix(ncol=7, nrow=length(seq(from = floor(min(merged_GS_data$normSCORE)), to = ceiling(max(merged_GS_data$normSCORE)))))
# i is for indexing into results
i = 1
for(cutoff in seq(from = floor(min(merged_GS_data$normSCORE)), to = ceiling(max(merged_GS_data$normSCORE))))
{
# called sites above the cutoff
tp = (length(refseq_called$normSCORE[refseq_called$normSCORE > cutoff])) / 1000
# any uncalled in RefSeq data are false negatives, as well as any below the cutoff
fn = (length(refseq_called$normSCORE[refseq_called$normSCORE < cutoff])) / 1000 # (length(refseq_uncalled$SCORE) + length(refseq_called$SCORE[refseq_called$SCORE < cutoff])) / 1000
# true negatives are the random sites scored below cutoff + random sites not called
tn = (length(random_called$normSCORE[random_called$normSCORE < cutoff])) / 1000 # (length(random_uncalled$SCORE) + length(random_called$SCORE[random_called$SCORE < cutoff])) / 1000
# false positives are any called in random sites
fp = (length(random_called$normSCORE[random_called$normSCORE > cutoff])) /1000
tpr = tp / (tp + fn) # sensitivity
tnr = tn / (tn + fp) # specificity
fpr = fp / (fp + tn) # 1 - specificity
ppv = tp / (tp + fp)
npv = tn / (tn + fn)
accuracy = (tp + tn) / (tp + tn + fp + fn)
mcc = ((tp * tn) - (fp * fn)) / sqrt((tp + fp) * (tp + fn) * (tn + fp) * (tn + fn))
GS_ROC_results[i,1] <- fpr
GS_ROC_results[i,2] <- tpr
GS_ROC_results[i,3] <- cutoff
GS_ROC_results[i,4] <- accuracy
GS_ROC_results[i,5] <- mcc
GS_ROC_results[i,6] <- ppv
GS_ROC_results[i,7] <- npv
i <- i +1
}
GS_ROC_results <- data.frame(GS_ROC_results)
ggplot(GS_ROC_results) + geom_line(aes(x=X1, y=X2), size=1) + xlab("False positive rate") + xlim(0,1) + ylab("True positive rate") + ylim(0,1) + ggtitle("MaxEntScan reciever operating characterstic curve")
head(merged_GS_data)
GS_ROC_results = matrix(ncol=7, nrow=length(seq(from = floor(min(merged_GS_data$normSCORE)), to = ceiling(max(merged_GS_data$normSCORE)))))
# i is for indexing into results
i = 1
for(cutoff in seq(from = floor(min(merged_GS_data$normSCORE)), to = ceiling(max(merged_GS_data$normSCORE))))
{
# called sites above the cutoff
tp = (length(refseq_called$normSCORE[refseq_called$normSCORE > cutoff])) / 1000
# any uncalled in RefSeq data are false negatives, as well as any below the cutoff
fn = (length(refseq_called$normSCORE[refseq_called$normSCORE < cutoff])) / 1000 # (length(refseq_uncalled$SCORE) + length(refseq_called$SCORE[refseq_called$SCORE < cutoff])) / 1000
# true negatives are the random sites scored below cutoff + random sites not called
tn = (length(random_called$normSCORE[random_called$normSCORE < cutoff])) / 1000 # (length(random_uncalled$SCORE) + length(random_called$SCORE[random_called$SCORE < cutoff])) / 1000
# false positives are any called in random sites
fp = (length(random_called$normSCORE[random_called$normSCORE > cutoff])) /1000
tpr = tp / (tp + fn) # sensitivity
tnr = tn / (tn + fp) # specificity
fpr = fp / (fp + tn) # 1 - specificity
ppv = tp / (tp + fp)
npv = tn / (tn + fn)
accuracy = (tp + tn) / (tp + tn + fp + fn)
mcc = ((tp * tn) - (fp * fn)) / sqrt((tp + fp) * (tp + fn) * (tn + fp) * (tn + fn))
GS_ROC_results[i,1] <- fpr
GS_ROC_results[i,2] <- tpr
GS_ROC_results[i,3] <- cutoff
GS_ROC_results[i,4] <- accuracy
GS_ROC_results[i,5] <- mcc
GS_ROC_results[i,6] <- ppv
GS_ROC_results[i,7] <- npv
i <- i +1
}
GS_ROC_results <- data.frame(GS_ROC_results)
ggplot(GS_ROC_results) + geom_line(aes(x=X1, y=X2), size=1) + xlab("False positive rate") + xlim(0,1) + ylab("True positive rate") + ylim(0,1) + ggtitle("MaxEntScan reciever operating characterstic curve")
View(GS_ROC_results)
min(merged_GS_data$normSCORE)
max(merged_GS_data$normSCORE)
ceiling(max(merged_GS_data$normSCORE))
floor(min(merged_GS_data$normSCORE))
GS_ROC_results = matrix(ncol=7, nrow=length(seq(from = floor(min(merged_GS_data$normSCORE)), to = ceiling(max(merged_GS_data$normSCORE)), by = 0.1)))
# i is for indexing into results
i = 1
for(cutoff in seq(from = floor(min(merged_GS_data$normSCORE)), to = ceiling(max(merged_GS_data$normSCORE)), by=0.1))
{
# called sites above the cutoff
tp = (length(refseq_called$normSCORE[refseq_called$normSCORE > cutoff])) / 1000
# any uncalled in RefSeq data are false negatives, as well as any below the cutoff
fn = (length(refseq_called$normSCORE[refseq_called$normSCORE < cutoff])) / 1000 # (length(refseq_uncalled$SCORE) + length(refseq_called$SCORE[refseq_called$SCORE < cutoff])) / 1000
# true negatives are the random sites scored below cutoff + random sites not called
tn = (length(random_called$normSCORE[random_called$normSCORE < cutoff])) / 1000 # (length(random_uncalled$SCORE) + length(random_called$SCORE[random_called$SCORE < cutoff])) / 1000
# false positives are any called in random sites
fp = (length(random_called$normSCORE[random_called$normSCORE > cutoff])) /1000
tpr = tp / (tp + fn) # sensitivity
tnr = tn / (tn + fp) # specificity
fpr = fp / (fp + tn) # 1 - specificity
ppv = tp / (tp + fp)
npv = tn / (tn + fn)
accuracy = (tp + tn) / (tp + tn + fp + fn)
mcc = ((tp * tn) - (fp * fn)) / sqrt((tp + fp) * (tp + fn) * (tn + fp) * (tn + fn))
GS_ROC_results[i,1] <- fpr
GS_ROC_results[i,2] <- tpr
GS_ROC_results[i,3] <- cutoff
GS_ROC_results[i,4] <- accuracy
GS_ROC_results[i,5] <- mcc
GS_ROC_results[i,6] <- ppv
GS_ROC_results[i,7] <- npv
i <- i +1
}
GS_ROC_results <- data.frame(GS_ROC_results)
View(GS_ROC_results)
GS_ROC_results = matrix(ncol=7, nrow=length(seq(from = floor(min(merged_GS_data$normSCORE)), to = ceiling(max(merged_GS_data$normSCORE)), by = 0.1)))
# i is for indexing into results
i = 1
for(cutoff in seq(from = floor(min(merged_GS_data$normSCORE)), to = ceiling(max(merged_GS_data$normSCORE)), by=0.1))
{
# called sites above the cutoff
tp = (length(refseq_called$normSCORE[refseq_called$normSCORE > cutoff])) / 1000
# any uncalled in RefSeq data are false negatives, as well as any below the cutoff
fn = (length(refseq_called$normSCORE[refseq_called$normSCORE < cutoff])) / 1000 # (length(refseq_uncalled$SCORE) + length(refseq_called$SCORE[refseq_called$SCORE < cutoff])) / 1000
# true negatives are the random sites scored below cutoff + random sites not called
tn = (length(random_called$normSCORE[random_called$normSCORE < cutoff])) / 1000 # (length(random_uncalled$SCORE) + length(random_called$SCORE[random_called$SCORE < cutoff])) / 1000
# false positives are any called in random sites
fp = (length(random_called$normSCORE[random_called$normSCORE > cutoff])) /1000
print(tp + fn + tn + fp)
tpr = tp / (tp + fn) # sensitivity
tnr = tn / (tn + fp) # specificity
fpr = fp / (fp + tn) # 1 - specificity
ppv = tp / (tp + fp)
npv = tn / (tn + fn)
accuracy = (tp + tn) / (tp + tn + fp + fn)
mcc = ((tp * tn) - (fp * fn)) / sqrt((tp + fp) * (tp + fn) * (tn + fp) * (tn + fn))
GS_ROC_results[i,1] <- fpr
GS_ROC_results[i,2] <- tpr
GS_ROC_results[i,3] <- cutoff
GS_ROC_results[i,4] <- accuracy
GS_ROC_results[i,5] <- mcc
GS_ROC_results[i,6] <- ppv
GS_ROC_results[i,7] <- npv
i <- i +1
}
GS_ROC_results <- data.frame(GS_ROC_results)
GS_ROC_results = matrix(ncol=7, nrow=length(seq(from = floor(min(merged_GS_data$normSCORE)), to = ceiling(max(merged_GS_data$normSCORE)), by = 0.1)))
# i is for indexing into results
i = 1
for(cutoff in seq(from = floor(min(merged_GS_data$normSCORE)), to = ceiling(max(merged_GS_data$normSCORE)), by=0.1))
{
# called sites above the cutoff
tp = (length(merged_GS_data$normSCORE[merged_GS_data$normSCORE > cutoff])) / 1000
# any uncalled in RefSeq data are false negatives, as well as any below the cutoff
fn = (length(merged_GS_data$normSCORE[merged_GS_data$normSCORE < cutoff])) / 1000 # (length(refseq_uncalled$SCORE) + length(refseq_called$SCORE[refseq_called$SCORE < cutoff])) / 1000
# true negatives are the random sites scored below cutoff + random sites not called
tn = (length(merged_GS_data$normSCORE[merged_GS_data$normSCORE < cutoff])) / 1000 # (length(random_uncalled$SCORE) + length(random_called$SCORE[random_called$SCORE < cutoff])) / 1000
# false positives are any called in random sites
fp = (length(merged_GS_data$normSCORE[merged_GS_data$normSCORE > cutoff])) /1000
print(tp + fn + tn + fp)
tpr = tp / (tp + fn) # sensitivity
tnr = tn / (tn + fp) # specificity
fpr = fp / (fp + tn) # 1 - specificity
ppv = tp / (tp + fp)
npv = tn / (tn + fn)
accuracy = (tp + tn) / (tp + tn + fp + fn)
mcc = ((tp * tn) - (fp * fn)) / sqrt((tp + fp) * (tp + fn) * (tn + fp) * (tn + fn))
GS_ROC_results[i,1] <- fpr
GS_ROC_results[i,2] <- tpr
GS_ROC_results[i,3] <- cutoff
GS_ROC_results[i,4] <- accuracy
GS_ROC_results[i,5] <- mcc
GS_ROC_results[i,6] <- ppv
GS_ROC_results[i,7] <- npv
i <- i +1
}
GS_ROC_results <- data.frame(GS_ROC_results)
e
ggplot(GS_ROC_results) + geom_line(aes(x=X1, y=X2), size=1) + xlab("False positive rate") + xlim(0,1) + ylab("True positive rate") + ylim(0,1) + ggtitle("MaxEntScan reciever operating characterstic curve")
ggplot(GS_ROC_results, aes(x=X3)) + geom_line(aes(y=X2, colour="TPR"), size=1) + geom_line(aes(y=X1, colour = "FPR"), size=1) + geom_line(aes(y=X4, colour="Accuracy"), size=1) + scale_colour_manual("", breaks=c("TPR", "FPR", "Accuracy"), values=c("TPR"="blue", "FPR"="green", "Accuracy"="red")) + xlab("cutoff") +ylab("") + ggtitle("Accuracy of GeneSplicer")
GS_ROC_results = matrix(ncol=7, nrow=length(seq(from = floor(min(merged_GS_data$normSCORE)), to = ceiling(max(merged_GS_data$normSCORE)), by = 0.001)))
# i is for indexing into results
i = 1
for(cutoff in seq(from = floor(min(merged_GS_data$normSCORE)), to = ceiling(max(merged_GS_data$normSCORE)), by=0.001))
{
# called sites above the cutoff
tp = (length(merged_GS_data$normSCORE[merged_GS_data$normSCORE > cutoff])) / 1000
# any uncalled in RefSeq data are false negatives, as well as any below the cutoff
fn = (length(merged_GS_data$normSCORE[merged_GS_data$normSCORE < cutoff])) / 1000 # (length(refseq_uncalled$SCORE) + length(refseq_called$SCORE[refseq_called$SCORE < cutoff])) / 1000
# true negatives are the random sites scored below cutoff + random sites not called
tn = (length(merged_GS_data$normSCORE[merged_GS_data$normSCORE < cutoff])) / 1000 # (length(random_uncalled$SCORE) + length(random_called$SCORE[random_called$SCORE < cutoff])) / 1000
# false positives are any called in random sites
fp = (length(merged_GS_data$normSCORE[merged_GS_data$normSCORE > cutoff])) /1000
print(tp + fn + tn + fp)
tpr = tp / (tp + fn) # sensitivity
tnr = tn / (tn + fp) # specificity
fpr = fp / (fp + tn) # 1 - specificity
ppv = tp / (tp + fp)
npv = tn / (tn + fn)
accuracy = (tp + tn) / (tp + tn + fp + fn)
mcc = ((tp * tn) - (fp * fn)) / sqrt((tp + fp) * (tp + fn) * (tn + fp) * (tn + fn))
GS_ROC_results[i,1] <- fpr
GS_ROC_results[i,2] <- tpr
GS_ROC_results[i,3] <- cutoff
GS_ROC_results[i,4] <- accuracy
GS_ROC_results[i,5] <- mcc
GS_ROC_results[i,6] <- ppv
GS_ROC_results[i,7] <- npv
i <- i +1
}
GS_ROC_results = matrix(ncol=7, nrow=length(seq(from = floor(min(merged_GS_data$normSCORE)), to = ceiling(max(merged_GS_data$normSCORE)), by = 0.01)))
# i is for indexing into results
i = 1
for(cutoff in seq(from = floor(min(merged_GS_data$normSCORE)), to = ceiling(max(merged_GS_data$normSCORE)), by=0.01))
{
# called sites above the cutoff
tp = (length(merged_GS_data$normSCORE[merged_GS_data$normSCORE > cutoff])) / 1000
# any uncalled in RefSeq data are false negatives, as well as any below the cutoff
fn = (length(merged_GS_data$normSCORE[merged_GS_data$normSCORE < cutoff])) / 1000 # (length(refseq_uncalled$SCORE) + length(refseq_called$SCORE[refseq_called$SCORE < cutoff])) / 1000
# true negatives are the random sites scored below cutoff + random sites not called
tn = (length(merged_GS_data$normSCORE[merged_GS_data$normSCORE < cutoff])) / 1000 # (length(random_uncalled$SCORE) + length(random_called$SCORE[random_called$SCORE < cutoff])) / 1000
# false positives are any called in random sites
fp = (length(merged_GS_data$normSCORE[merged_GS_data$normSCORE > cutoff])) /1000
tpr = tp / (tp + fn) # sensitivity
tnr = tn / (tn + fp) # specificity
fpr = fp / (fp + tn) # 1 - specificity
ppv = tp / (tp + fp)
npv = tn / (tn + fn)
accuracy = (tp + tn) / (tp + tn + fp + fn)
mcc = ((tp * tn) - (fp * fn)) / sqrt((tp + fp) * (tp + fn) * (tn + fp) * (tn + fn))
GS_ROC_results[i,1] <- fpr
GS_ROC_results[i,2] <- tpr
GS_ROC_results[i,3] <- cutoff
GS_ROC_results[i,4] <- accuracy
GS_ROC_results[i,5] <- mcc
GS_ROC_results[i,6] <- ppv
GS_ROC_results[i,7] <- npv
i <- i +1
}
GS_ROC_results <- data.frame(GS_ROC_results)
ggplot(GS_ROC_results) + geom_line(aes(x=X1, y=X2), size=1) + xlab("False positive rate") + xlim(0,1) + ylab("True positive rate") + ylim(0,1) + ggtitle("MaxEntScan reciever operating characterstic curve")
ggplot(GS_ROC_results, aes(x=X3)) + geom_line(aes(y=X2, colour="TPR"), size=1) + geom_line(aes(y=X1, colour = "FPR"), size=1) + geom_line(aes(y=X4, colour="Accuracy"), size=1) + scale_colour_manual("", breaks=c("TPR", "FPR", "Accuracy"), values=c("TPR"="blue", "FPR"="green", "Accuracy"="red")) + xlab("cutoff") +ylab("") + ggtitle("Accuracy of GeneSplicer")
GS_ROC_results = matrix(ncol=7, nrow=length(seq(from = floor(min(merged_GS_data$normSCORE)), to = ceiling(max(merged_GS_data$normSCORE)), by = 0.001)))
# i is for indexing into results
i = 1
for(cutoff in seq(from = floor(min(merged_GS_data$normSCORE)), to = ceiling(max(merged_GS_data$normSCORE)), by=0.001))
{
# called sites above the cutoff
tp = (length(merged_GS_data$normSCORE[merged_GS_data$normSCORE > cutoff])) / 1000
# any uncalled in RefSeq data are false negatives, as well as any below the cutoff
fn = (length(merged_GS_data$normSCORE[merged_GS_data$normSCORE < cutoff])) / 1000 # (length(refseq_uncalled$SCORE) + length(refseq_called$SCORE[refseq_called$SCORE < cutoff])) / 1000
# true negatives are the random sites scored below cutoff + random sites not called
tn = (length(merged_GS_data$normSCORE[merged_GS_data$normSCORE < cutoff])) / 1000 # (length(random_uncalled$SCORE) + length(random_called$SCORE[random_called$SCORE < cutoff])) / 1000
# false positives are any called in random sites
fp = (length(merged_GS_data$normSCORE[merged_GS_data$normSCORE > cutoff])) /1000
tpr = tp / (tp + fn) # sensitivity
tnr = tn / (tn + fp) # specificity
fpr = fp / (fp + tn) # 1 - specificity
ppv = tp / (tp + fp)
npv = tn / (tn + fn)
accuracy = (tp + tn) / (tp + tn + fp + fn)
mcc = ((tp * tn) - (fp * fn)) / sqrt((tp + fp) * (tp + fn) * (tn + fp) * (tn + fn))
GS_ROC_results[i,1] <- fpr
GS_ROC_results[i,2] <- tpr
GS_ROC_results[i,3] <- cutoff
GS_ROC_results[i,4] <- accuracy
GS_ROC_results[i,5] <- mcc
GS_ROC_results[i,6] <- ppv
GS_ROC_results[i,7] <- npv
i <- i +1
}
GS_ROC_results <- data.frame(GS_ROC_results)
ggplot(GS_ROC_results) + geom_line(aes(x=X1, y=X2), size=1) + xlab("False positive rate") + xlim(0,1) + ylab("True positive rate") + ylim(0,1) + ggtitle("MaxEntScan reciever operating characterstic curve")
ggplot(GS_ROC_results, aes(x=X3)) + geom_line(aes(y=X2, colour="TPR"), size=1) + geom_line(aes(y=X1, colour = "FPR"), size=1) + geom_line(aes(y=X4, colour="Accuracy"), size=1) + scale_colour_manual("", breaks=c("TPR", "FPR", "Accuracy"), values=c("TPR"="blue", "FPR"="green", "Accuracy"="red")) + xlab("cutoff") +ylab("") + ggtitle("Accuracy of GeneSplicer")
GS_ROC_results = matrix(ncol=7, nrow=length(seq(from = floor(min(merged_GS_data$normSCORE)), to = ceiling(max(merged_GS_data$normSCORE)), by = 0.001)))
# i is for indexing into results
i = 1
for(cutoff in seq(from = floor(min(merged_GS_data$normSCORE)), to = ceiling(max(merged_GS_data$normSCORE)), by=0.001))
{
# called sites above the cutoff
tp = (length(merged_GS_data$normSCORE[merged_GS_data$normSCORE > cutoff])) / 1000
# any uncalled in RefSeq data are false negatives, as well as any below the cutoff
fn = (length(refseq_uncalled$SCORE) + length(merged_GS_data$normSCORE[merged_GS_data$normSCORE < cutoff])) / 1000 # (length(refseq_uncalled$SCORE) + length(refseq_called$SCORE[refseq_called$SCORE < cutoff])) / 1000
# true negatives are the random sites scored below cutoff + random sites not called
tn = (length(random_uncalled$SCORE) + length(merged_GS_data$normSCORE[merged_GS_data$normSCORE < cutoff])) / 1000 # (length(random_uncalled$SCORE) + length(random_called$SCORE[random_called$SCORE < cutoff])) / 1000
# false positives are any called in random sites
fp = (length(merged_GS_data$normSCORE[merged_GS_data$normSCORE > cutoff])) /1000
tpr = tp / (tp + fn) # sensitivity
tnr = tn / (tn + fp) # specificity
fpr = fp / (fp + tn) # 1 - specificity
ppv = tp / (tp + fp)
npv = tn / (tn + fn)
accuracy = (tp + tn) / (tp + tn + fp + fn)
mcc = ((tp * tn) - (fp * fn)) / sqrt((tp + fp) * (tp + fn) * (tn + fp) * (tn + fn))
GS_ROC_results[i,1] <- fpr
GS_ROC_results[i,2] <- tpr
GS_ROC_results[i,3] <- cutoff
GS_ROC_results[i,4] <- accuracy
GS_ROC_results[i,5] <- mcc
GS_ROC_results[i,6] <- ppv
GS_ROC_results[i,7] <- npv
i <- i +1
}
GS_ROC_results <- data.frame(GS_ROC_results)
ggplot(GS_ROC_results) + geom_line(aes(x=X1, y=X2), size=1) + xlab("False positive rate") + xlim(0,1) + ylab("True positive rate") + ylim(0,1) + ggtitle("MaxEntScan reciever operating characterstic curve")
ggplot(GS_ROC_results, aes(x=X3)) + geom_line(aes(y=X2, colour="TPR"), size=1) + geom_line(aes(y=X1, colour = "FPR"), size=1) + geom_line(aes(y=X4, colour="Accuracy"), size=1) + scale_colour_manual("", breaks=c("TPR", "FPR", "Accuracy"), values=c("TPR"="blue", "FPR"="green", "Accuracy"="red")) + xlab("cutoff") +ylab("") + ggtitle("Accuracy of GeneSplicer")
ggplot(merged_PWM_data, aes(normWT)) + geom_histogram(aes(fill=src), alpha=0.5, position="identity") + ylab("Count") + xlab("PWM Score") + ggtitle("Distribution of PWM scores for RefSeq and random sites")
dev.off()
ggplot(merged_PWM_data, aes(normWT)) + geom_histogram(aes(fill=src), alpha=0.5, position="identity") + ylab("Count") + xlab("PWM Score") + ggtitle("Distribution of PWM scores for RefSeq and random sites")
ggplot(merged_PWM_data, aes(normWT)) + geom_histogram(aes(fill=src), alpha=0.5, position="identity") + ylab("Count") + xlab("PWM Score") + ggtitle("Distribution of PWM scores for RefSeq and random sites")
ggplot(merged_PWM_data, aes(normWT)) + geom_histogram(aes(fill=src), alpha=0.5, position="identity") + xlim(0, 0.01) + ylab("Count") + xlab("PWM Score") + ggtitle("Distribution of PWM scores for RefSeq and random sites")
ggplot(merged_PWM_data, aes(normWT)) + geom_histogram(aes(fill=src), alpha=0.5, position="identity") + xlim(0, 0.001) + ylab("Count") + xlab("PWM Score") + ggtitle("Distribution of PWM scores for RefSeq and random sites")
ggplot(merged_PWM_data, aes(normWT)) + geom_histogram(aes(fill=src), alpha=0.5, position="identity") + xlim(0.01, 0.02) + ylab("Count") + xlab("PWM Score") + ggtitle("Distribution of PWM scores for RefSeq and random sites")
ggplot(merged_PWM_data, aes(normWT)) + geom_histogram(aes(fill=src), alpha=0.5, position="identity") + xlim(0.01, 0.05) + ylab("Count") + xlab("PWM Score") + ggtitle("Distribution of PWM scores for RefSeq and random sites")
ggplot(merged_PWM_data, aes(normWT)) + geom_histogram(aes(fill=src), alpha=0.5, position="identity") + xlim(0, 0.05) + ylab("Count") + xlab("PWM Score") + ggtitle("Distribution of PWM scores for RefSeq and random sites")
PWM_ROC_results = matrix(ncol=7, nrow=length(seq(from = floor(min(merged_PWM_data$normWT)), to = ceiling(max(merged_PWM_data$normWT)), by = 0.00001)))
i = 1
for(cutoff in seq(from = floor(min(merged_PWM_data$normWT)), to = ceiling(max(merged_PWM_data$normWT)), by = 0.00001))
{
# divide everything by a large amount, as there are so many values here it was causing integer overflow when calculating MCC
# dividing everything keeps the proportions the same, doesn't affect results.
tp = (length(merged_PWM_data$WT[merged_PWM_data$normWT > cutoff & merged_PWM_data$src=="REFSEQ"]))/1000
# false negatives include all refseq sites not called (i.e. those with scores == 990)
fn = (length(merged_PWM_data$WT[merged_PWM_data$normWT < cutoff & merged_PWM_data$src=="REFSEQ"]))/1000
# true negatives include all random sites not called
tn = (length(merged_PWM_data$WT[merged_PWM_data$normWT < cutoff & merged_PWM_data$src=="RANDOM"]))/1000
fp = length(merged_PWM_data$WT[merged_PWM_data$normWT > cutoff & merged_PWM_data$src=="RANDOM"])/1000
tpr = tp / (tp + fn)
tnr = tn / (tn + fp)
fpr = 1 - tnr
ppv = tp / (tp + fp)
npv = tn / (tn + fn)
accuracy = (tp + tn) / (tp + tn + fp + fn)
mcc = ((tp * tn) - (fp * fn)) / sqrt((tp + fp) * (tp + fn) * (tn + fp) * (tn + fn))
PWM_ROC_results[i,1] <- fpr
PWM_ROC_results[i,2] <- tpr
PWM_ROC_results[i,3] <- cutoff
PWM_ROC_results[i,4] <- accuracy
PWM_ROC_results[i,5] <- mcc
PWM_ROC_results[i,6] <- ppv
PWM_ROC_results[i,7] <- npv
i <- i + 1
}
PWM_ROC_results <- data.frame(PWM_ROC_results)
View(refseq)
ggplot(PWM_ROC_results) + geom_line(aes(x=X1, y=X2), size=1) + xlab("False positive rate") +xlim(0,1) + ylab("True positive rate") +ylim(0,1) + ggtitle("PWM model reciever operating characterstic curve")
ggplot(PWM_ROC_results, aes(x=X3)) + geom_line(aes(y=X2, colour="TPR"), size=1) + geom_line(aes(y=X1, colour = "FPR"), size=1) + geom_line(aes(y=X4, colour="Accuracy"), size=1) + xlim(0, 0.01) + scale_colour_manual("", breaks=c("TPR", "FPR", "Accuracy"), values=c("TPR"="blue", "FPR"="green", "Accuracy"="red")) + xlab("cutoff") +ylab("") + ggtitle("Accuracy of MaxEntScan")
PWM_ROC_results[PWM_ROC_results$X4 == max (PWM_ROC_results$X4),]
ggplot(PWM_ROC_results, aes(x=X3)) + geom_line(aes(y=X2, colour="TPR"), size=1) + geom_line(aes(y=X1, colour = "FPR"), size=1) + geom_line(aes(y=X5, colour="Accuracy"), size=1) + xlim(0, 0.01) + scale_colour_manual("", breaks=c("TPR", "FPR", "Accuracy"), values=c("TPR"="blue", "FPR"="green", "Accuracy"="red")) + xlab("cutoff") +ylab("") + ggtitle("Accuracy of Position Weight Matrices")
ggplot(PWM_ROC_results, aes(x=X3)) + geom_line(aes(y=X2, colour="TPR"), size=1) + geom_line(aes(y=X1, colour = "FPR"), size=1) + geom_line(aes(y=X4, colour="Accuracy"), size=1) + geom_line(aes(y=X5, colour="MCC"), size=1) + xlim(0, 0.01) + scale_colour_manual("", breaks=c("TPR", "FPR", "Accuracy", "MCC"), values=c("TPR"="blue", "FPR"="green", "Accuracy"="red", "MCC"="purple")) + xlab("cutoff") +ylab("") + ggtitle("Accuracy of Position Weight Matrices")
